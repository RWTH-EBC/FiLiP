name: CI for FiLiP

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Install build tools
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          pip install .[development]

      # Step 5: Create .env file
      - name: Create .env file
        run: |
          echo "CB_URL=http://localhost:1026" > .env
          echo "IOTA_URL=http://localhost:4041" >> .env
          echo "QL_URL=http://localhost:8668" >> .env
          echo "MQTT_BROKER_URL=mqtt://localhost:1883" >> .env

  fiware_setup:
    needs: setup
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Clone FIWARE repository and start services
      - name: Clone FIWARE repository
        run: |
          git clone https://github.com/N5GEH/n5geh.platform.git
          cd n5geh.platform/v2 && docker compose pull && docker compose up -d

      # Step 3: Wait for FIWARE services to start
      - name: Wait for FIWARE services to start
        run: |
          for i in {1..120}; do
            curl -s http://localhost:1026/version && \
            curl -s http://localhost:4041/iot/about && \
            curl -s http://localhost:8668/version && break || sleep 10
          done

      # Step 4: Verify FIWARE services
      - name: Verify FIWARE services
        run: |
          curl -X GET "http://localhost:1026/version"
          curl -X GET "http://localhost:4041/iot/about"
          curl -X GET "http://localhost:8668/version"

      # Step 5: Print Docker logs for debugging
      - name: Print Docker logs
        working-directory: n5geh.platform/v2
        run: docker compose logs

      # Step 6: Print Docker ps -a for debugging
      - name: Print Docker ps
        run: docker ps -a

      # Step 7: Print current directory for debugging
      - name: Print current directory
        run: pwd

  test:
    needs: fiware_setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Install build tools
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      # Step 4: Install test dependencies
      - name: Install test dependencies
        run: |
          pip install .[test]
          pip install pytest

      # Step 5: Print .env file for debugging
      - name: Print .env file for debugging
        run: cat .env

      # Step 6: Print Docker ps -a for debugging
      - name: Print Docker ps
        run: docker ps -a

      # Step 7: Print current directory for debugging
      - name: Print current directory
        run: pwd

      # Step 8: Run tests
      - name: Run tests
        working-directory: ${{ github.workspace }}
        run: |
          python -m unittest discover -s tests -p "test_*.py" || true