name: CI for FiLiP

on:
  push:
    branches:
      - "315-Unittest-via-Github-actions"
  pull_request:
    branches:
      - "315-Unittest-via-Github-actions"

jobs:
  setup:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Install build tools
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          pip install .[development]

      # Step 5: Create .env file with updated values
      - name: Create .env file
        run: |
          echo "LOG_LEVEL=INFO" > .env
          echo "CB_URL=http://localhost:1026" >> .env
          echo "ORION_LD_URL=http://localhost:1027" >> .env
          echo "IOTA_JSON_URL=http://localhost:4041" >> .env
          # echo "IOTA_UL_URL=http://localhost:4061" >> .env  # Commented as per request
          echo "QL_URL=http://localhost:8668" >> .env
          echo "MQTT_BROKER_URL=mqtt://localhost:1883" >> .env
          echo "MQTT_BROKER_URL_INTERNAL=mqtt://mqtt-broker:1883" >> .env
          echo "FIWARE_SERVICE=filip" >> .env
          echo "FIWARE_SERVICEPATH=/testing" >> .env

      # Step 6: Verify environment setup
      - name: Verify environment setup
        run: |
          echo "Verifying .env file:"
          cat .env

  fiware_setup:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      # Step 1: Navigate to docker folder
      - name: List files for debugging
        run: ls -l

      - name: Navigate to Docker folder
        run: |
          cd docker

      # Step 2: Start FIWARE services using local docker-compose.yml
      - name: Start FIWARE services from docker folder
        working-directory: docker
        run: docker compose up -d

      # Step 3: Wait for FIWARE services
      - name: Wait for FIWARE services to start
        run: |
          for i in {1..30}; do
            curl -s http://localhost:1026/version && \
            curl -s http://localhost:1027/version && \
            curl -s http://localhost:4041/iot/about && \
            curl -s http://localhost:8668/version && break || sleep 2
          done

      # Step 4: Check running Docker containers
      - name: Verify running FIWARE services
        run: docker ps -a

  test:
    needs: fiware_setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Install build tools
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      # Step 4: Install test dependencies
      - name: Install test dependencies
        run: |
          pip install .[test]
          pip install pytest

      # Step 5: Run tests
      - name: Run tests with both unittest and pytest
        run: |
          export TEST_ENGINE=PYTEST &&
          export TEST_PATH=tests &&
          if [ "$TEST_ENGINE" == "PYTEST" ]; then python -m pytest $TEST_PATH/; else python -m unittest discover --verbose . "test_*.py"; fi